import pygame

# --- COLE AQUI SUA LISTA GERADA ---
WALL_LIST = [
    (0, 0, 'N'),
    (0, 0, 'W'),
    (0, 1, 'N'),
    (0, 2, 'N'),
    (0, 2, 'S'),
    (0, 3, 'N'),
    (0, 3, 'S'),
    (0, 4, 'N'),
    (0, 4, 'S'),
    (0, 5, 'N'),
    (0, 5, 'S'),
    (0, 6, 'E'),
    (0, 6, 'N'),
    (0, 7, 'N'),
    (0, 8, 'E'),
    (0, 8, 'N'),
    (0, 9, 'N'),
    (0, 9, 'S'),
    (0, 10, 'N'),
    (0, 11, 'E'),
    (0, 11, 'N'),
    (0, 12, 'N'),
    (0, 12, 'S'),
    (0, 13, 'N'),
    (0, 13, 'S'),
    (0, 14, 'N'),
    (0, 14, 'S'),
    (0, 15, 'E'),
    (0, 15, 'N'),
    (1, 0, 'E'),
    (1, 0, 'W'),
    (1, 1, 'S'),
    (1, 2, 'S'),
    (1, 3, 'E'),
    (1, 5, 'E'),
    (1, 6, 'S'),
    (1, 7, 'E'),
    (1, 7, 'S'),
    (1, 8, 'E'),
    (1, 10, 'E'),
    (1, 10, 'S'),
    (1, 11, 'S'),
    (1, 12, 'S'),
    (1, 13, 'S'),
    (1, 14, 'E'),
    (1, 15, 'E'),
    (2, 0, 'S'),
    (2, 0, 'W'),
    (2, 1, 'E'),
    (2, 2, 'E'),
    (2, 3, 'S'),
    (2, 4, 'E'),
    (2, 4, 'S'),
    (2, 5, 'S'),
    (2, 6, 'E'),
    (2, 7, 'S'),
    (2, 8, 'S'),
    (2, 9, 'E'),
    (2, 9, 'S'),
    (2, 11, 'S'),
    (2, 12, 'S'),
    (2, 13, 'S'),
    (2, 14, 'E'),
    (2, 14, 'S'),
    (2, 15, 'E'),
    (3, 0, 'W'),
    (3, 1, 'E'),
    (3, 1, 'S'),
    (3, 2, 'S'),
    (3, 4, 'S'),
    (3, 5, 'E'),
    (3, 6, 'S'),
    (3, 7, 'E'),
    (3, 8, 'E'),
    (3, 10, 'E'),
    (3, 10, 'S'),
    (3, 11, 'E'),
    (3, 14, 'E'),
    (3, 15, 'E'),
    (4, 0, 'E'),
    (4, 0, 'W'),
    (4, 2, 'S'),
    (4, 3, 'E'),
    (4, 3, 'S'),
    (4, 5, 'E'),
    (4, 5, 'S'),
    (4, 6, 'E'),
    (4, 7, 'E'),
    (4, 8, 'S'),
    (4, 9, 'E'),
    (4, 10, 'S'),
    (4, 11, 'S'),
    (4, 12, 'E'),
    (4, 12, 'S'),
    (4, 13, 'E'),
    (4, 14, 'S'),
    (4, 15, 'E'),
    (5, 0, 'S'),
    (5, 0, 'W'),
    (5, 1, 'E'),
    (5, 1, 'S'),
    (5, 3, 'E'),
    (5, 4, 'E'),
    (5, 6, 'E'),
    (5, 6, 'S'),
    (5, 7, 'S'),
    (5, 8, 'E'),
    (5, 9, 'S'),
    (5, 10, 'S'),
    (5, 11, 'S'),
    (5, 12, 'E'),
    (5, 13, 'S'),
    (5, 14, 'E'),
    (5, 15, 'E'),
    (6, 0, 'W'),
    (6, 2, 'E'),
    (6, 2, 'S'),
    (6, 3, 'E'),
    (6, 3, 'S'),
    (6, 4, 'S'),
    (6, 5, 'E'),
    (6, 7, 'S'),
    (6, 8, 'E'),
    (6, 8, 'S'),
    (6, 10, 'E'),
    (6, 12, 'E'),
    (6, 12, 'S'),
    (6, 14, 'E'),
    (6, 14, 'S'),
    (6, 15, 'E'),
    (7, 0, 'E'),
    (7, 0, 'W'),
    (7, 1, 'S'),
    (7, 2, 'E'),
    (7, 4, 'S'),
    (7, 5, 'E'),
    (7, 5, 'S'),
    (7, 6, 'S'),
    (7, 7, 'E'),
    (7, 9, 'E'),
    (7, 9, 'S'),
    (7, 10, 'E'),
    (7, 11, 'E'),
    (7, 12, 'S'),
    (7, 13, 'E'),
    (7, 14, 'S'),
    (7, 15, 'E'),
    (8, 0, 'S'),
    (8, 0, 'W'),
    (8, 1, 'E'),
    (8, 2, 'S'),
    (8, 3, 'E'),
    (8, 3, 'S'),
    (8, 4, 'E'),
    (8, 6, 'S'),
    (8, 7, 'E'),
    (8, 7, 'S'),
    (8, 8, 'S'),
    (8, 9, 'E'),
    (8, 9, 'S'),
    (8, 10, 'E'),
    (8, 11, 'S'),
    (8, 12, 'E'),
    (8, 13, 'S'),
    (8, 14, 'E'),
    (8, 15, 'E'),
    (9, 0, 'E'),
    (9, 0, 'W'),
    (9, 1, 'S'),
    (9, 2, 'S'),
    (9, 4, 'E'),
    (9, 4, 'S'),
    (9, 5, 'E'),
    (9, 7, 'S'),
    (9, 8, 'S'),
    (9, 9, 'E'),
    (9, 10, 'S'),
    (9, 11, 'S'),
    (9, 12, 'S'),
    (9, 13, 'S'),
    (9, 14, 'E'),
    (9, 14, 'S'),
    (9, 15, 'E'),
    (10, 0, 'E'),
    (10, 0, 'W'),
    (10, 2, 'S'),
    (10, 3, 'E'),
    (10, 3, 'S'),
    (10, 5, 'E'),
    (10, 5, 'S'),
    (10, 6, 'S'),
    (10, 7, 'S'),
    (10, 8, 'E'),
    (10, 9, 'S'),
    (10, 10, 'S'),
    (10, 11, 'S'),
    (10, 12, 'E'),
    (10, 13, 'S'),
    (10, 14, 'E'),
    (10, 15, 'E'),
    (11, 0, 'E'),
    (11, 0, 'W'),
    (11, 2, 'S'),
    (11, 3, 'E'),
    (11, 3, 'S'),
    (11, 4, 'S'),
    (11, 5, 'S'),
    (11, 6, 'S'),
    (11, 8, 'S'),
    (11, 9, 'S'),
    (11, 10, 'S'),
    (11, 11, 'E'),
    (11, 12, 'S'),
    (11, 13, 'E'),
    (11, 15, 'E'),
    (11, 15, 'S'),
    (12, 0, 'W'),
    (12, 1, 'E'),
    (12, 1, 'S'),
    (12, 3, 'E'),
    (12, 5, 'S'),
    (12, 6, 'E'),
    (12, 7, 'S'),
    (12, 8, 'E'),
    (12, 8, 'S'),
    (12, 10, 'E'),
    (12, 11, 'E'),
    (12, 11, 'S'),
    (12, 13, 'E'),
    (12, 13, 'S'),
    (12, 14, 'S'),
    (12, 15, 'E'),
    (13, 0, 'E'),
    (13, 0, 'S'),
    (13, 0, 'W'),
    (13, 2, 'E'),
    (13, 2, 'S'),
    (13, 3, 'S'),
    (13, 4, 'E'),
    (13, 4, 'S'),
    (13, 6, 'S'),
    (13, 7, 'S'),
    (13, 8, 'S'),
    (13, 9, 'E'),
    (13, 9, 'S'),
    (13, 10, 'S'),
    (13, 11, 'E'),
    (13, 12, 'E'),
    (13, 13, 'S'),
    (13, 14, 'E'),
    (13, 15, 'E'),
    (14, 0, 'W'),
    (14, 1, 'E'),
    (14, 1, 'S'),
    (14, 2, 'S'),
    (14, 3, 'S'),
    (14, 4, 'S'),
    (14, 5, 'S'),
    (14, 6, 'E'),
    (14, 6, 'S'),
    (14, 7, 'S'),
    (14, 8, 'E'),
    (14, 10, 'E'),
    (14, 10, 'S'),
    (14, 11, 'S'),
    (14, 12, 'E'),
    (14, 12, 'S'),
    (14, 14, 'E'),
    (14, 14, 'S'),
    (14, 15, 'E'),
    (15, 0, 'S'),
    (15, 0, 'W'),
    (15, 1, 'S'),
    (15, 2, 'S'),
    (15, 3, 'S'),
    (15, 4, 'S'),
    (15, 5, 'S'),
    (15, 6, 'S'),
    (15, 7, 'S'),
    (15, 8, 'S'),
    (15, 9, 'S'),
    (15, 10, 'S'),
    (15, 11, 'S'),
    (15, 12, 'S'),
    (15, 13, 'S'),
    (15, 14, 'S'),
    (15, 15, 'E'),
    (15, 15, 'S'),
]

# --- CONSTANTES ---
SIZE = 16
CELL_SIZE = 30
WALL_WIDTH = 2
MARGIN = 20
WINDOW_SIZE = SIZE * CELL_SIZE + 2 * MARGIN

# --- DIREÇÕES ---
DIRS = {'N': (0, -1), 'E': (1, 0), 'S': (0, 1), 'W': (-1, 0)}
DIR_LINES = {
    'N': lambda x, y: [(x, y), (x + CELL_SIZE, y)],
    'S': lambda x, y: [(x, y + CELL_SIZE), (x + CELL_SIZE, y + CELL_SIZE)],
    'E': lambda x, y: [(x + CELL_SIZE, y), (x + CELL_SIZE, y + CELL_SIZE)],
    'W': lambda x, y: [(x, y), (x, y + CELL_SIZE)],
}

# --- PYGAME SETUP ---
pygame.init()
screen = pygame.display.set_mode((WINDOW_SIZE, WINDOW_SIZE))
pygame.display.set_caption("Labirinto do Micromouse")
clock = pygame.time.Clock()

# --- PLAYER ---
mouse_pos = [0, 0]  # Posição inicial (linha, coluna)


# --- FUNÇÃO DE DESENHO ---
def draw_maze():
    screen.fill((255, 255, 255))

    for (x, y, dir) in WALL_LIST:
        screen_x = MARGIN + y * CELL_SIZE
        screen_y = MARGIN + x * CELL_SIZE
        line = DIR_LINES[dir](screen_x, screen_y)
        pygame.draw.line(screen, (0, 0, 0), line[0], line[1], WALL_WIDTH)
    
        # Desenhar o mouse
    mx = MARGIN + mouse_pos[1] * CELL_SIZE + CELL_SIZE // 4
    my = MARGIN + mouse_pos[0] * CELL_SIZE + CELL_SIZE // 4
    pygame.draw.rect(screen, (255, 0, 0), (mx, my, CELL_SIZE // 2, CELL_SIZE // 2))


def has_wall(x, y, dir):
    return (x, y, dir) in WALL_LIST


# --- LOOP PRINCIPAL ---
running = True
while running:
    draw_maze()
    pygame.display.flip()
    clock.tick(30)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        keys = pygame.key.get_pressed()
    x, y = mouse_pos

    if keys[pygame.K_UP] and not has_wall(x, y, 'N') and not has_wall(x - 1, y, 'S'):
        mouse_pos[0] -= 1
    elif keys[pygame.K_DOWN] and not has_wall(x, y, 'S') and not has_wall(x + 1, y, 'N'):
        mouse_pos[0] += 1
    elif keys[pygame.K_LEFT] and not has_wall(x, y, 'W') and not has_wall(x, y - 1, 'E'):
        mouse_pos[1] -= 1
    elif keys[pygame.K_RIGHT] and not has_wall(x, y, 'E') and not has_wall(x, y + 1, 'W'):
        mouse_pos[1] += 1


pygame.quit()
